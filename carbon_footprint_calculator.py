# -*- coding: utf-8 -*-
"""Carbon Footprint Calculator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a-DaSwyTIVpHrugM4-3iD72lN-5X1nEi
"""

import psutil
import time
import numpy as np
from dataclasses import dataclass
from typing import Dict, List, Optional
import json

@dataclass
class CarbonMetrics:
    """Data class for storing carbon emission metrics"""
    energy_consumed_kwh: float
    carbon_intensity: float  # gCO2/kWh
    total_emissions_kg: float
    duration_hours: float
    model_size_mb: float

class CarbonFootprintCalculator:
    """
    A comprehensive tool for calculating carbon emissions during AI model operations
    """

    def __init__(self, region: str = "germany"):
        """Initialize with regional carbon intensity values"""
        self.carbon_intensities = {
            "germany": 366,  # gCO2/kWh (2024 average)
            "finland": 86,   # gCO2/kWh (very clean grid)
            "france": 57,    # gCO2/kWh
            "usa": 386,      # gCO2/kWh
        }
        self.region = region
        self.carbon_intensity = self.carbon_intensities.get(region, 400)

    def estimate_gpu_power(self, gpu_utilization: float) -> float:
        """Estimate GPU power consumption based on utilization"""
        # Typical high-end GPU power consumption estimates
        base_power = 50  # Watts idle
        max_power = 300  # Watts at full load
        return base_power + (max_power - base_power) * (gpu_utilization / 100)

    def measure_training_emissions(self,
                                 training_function,
                                 model_size_mb: float,
                                 *args, **kwargs) -> CarbonMetrics:
        """
        Measure carbon emissions during model training
        """
        start_time = time.time()
        initial_cpu_percent = psutil.cpu_percent(interval=1)

        # Execute training function
        result = training_function(*args, **kwargs)

        end_time = time.time()
        duration_hours = (end_time - start_time) / 3600

        # Estimate power consumption
        avg_cpu_percent = psutil.cpu_percent(interval=1)
        estimated_gpu_util = min(95, avg_cpu_percent * 1.2)  # Rough approximation
        avg_power_watts = self.estimate_gpu_power(estimated_gpu_util)

        # Calculate energy and emissions
        energy_kwh = (avg_power_watts * duration_hours) / 1000
        emissions_kg = (energy_kwh * self.carbon_intensity) / 1000

        return CarbonMetrics(
            energy_consumed_kwh=energy_kwh,
            carbon_intensity=self.carbon_intensity,
            total_emissions_kg=emissions_kg,
            duration_hours=duration_hours,
            model_size_mb=model_size_mb
        )

    def compare_scenarios(self, scenarios: List[Dict]) -> Dict:
        """Compare carbon emissions across different scenarios"""
        results = {}
        for scenario in scenarios:
            name = scenario['name']
            emissions = scenario['emissions_kg']
            energy = scenario['energy_kwh']

            results[name] = {
                'emissions_kg': emissions,
                'energy_kwh': energy,
                'efficiency_score': model_size_mb / emissions if emissions > 0 else 0
            }

        return results