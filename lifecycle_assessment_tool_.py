# -*- coding: utf-8 -*-
"""Lifecycle Assessment Tool  .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a-DaSwyTIVpHrugM4-3iD72lN-5X1nEi
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime, timedelta
from typing import Dict, List

class AILifecycleAssessment:
    """
    Comprehensive tool for assessing environmental impact across AI lifecycle
    """

    def __init__(self):
        self.phases = ['development', 'training', 'validation', 'deployment', 'inference']
        self.impact_categories = ['carbon_emissions', 'water_usage', 'e_waste', 'energy_consumption']

    def assess_development_phase(self, dev_hours: int, team_size: int) -> Dict:
        """Assess environmental impact of development phase"""
        # Estimate based on developer workstation power consumption
        workstation_power_kw = 0.15  # Average developer workstation
        energy_kwh = dev_hours * team_size * workstation_power_kw
        carbon_kg = energy_kwh * 0.366  # Germany grid intensity

        return {
            'phase': 'development',
            'duration_hours': dev_hours,
            'energy_kwh': energy_kwh,
            'carbon_kg': carbon_kg,
            'water_liters': energy_kwh * 2.3,  # Approximate water usage for electricity
        }

    def assess_training_phase(self, training_metrics: CarbonMetrics) -> Dict:
        """Convert training metrics to lifecycle assessment format"""
        return {
            'phase': 'training',
            'duration_hours': training_metrics.duration_hours,
            'energy_kwh': training_metrics.energy_consumed_kwh,
            'carbon_kg': training_metrics.total_emissions_kg,
            'water_liters': training_metrics.energy_consumed_kwh * 2.3,
        }

    def assess_inference_phase(self, requests_per_day: int,
                             inference_energy_per_request: float,
                             deployment_days: int = 365) -> Dict:
        """Assess environmental impact of inference phase"""
        total_requests = requests_per_day * deployment_days
        total_energy_kwh = total_requests * inference_energy_per_request
        carbon_kg = total_energy_kwh * 0.366

        return {
            'phase': 'inference',
            'duration_hours': deployment_days * 24,
            'energy_kwh': total_energy_kwh,
            'carbon_kg': carbon_kg,
            'water_liters': total_energy_kwh * 2.3,
        }

    def generate_lifecycle_report(self, assessments: List[Dict]) -> pd.DataFrame:
        """Generate comprehensive lifecycle assessment report"""
        df = pd.DataFrame(assessments)

        # Calculate totals
        totals = {
            'phase': 'TOTAL',
            'duration_hours': df['duration_hours'].sum(),
            'energy_kwh': df['energy_kwh'].sum(),
            'carbon_kg': df['carbon_kg'].sum(),
            'water_liters': df['water_liters'].sum(),
        }

        df = pd.concat([df, pd.DataFrame([totals])], ignore_index=True)
        return df

    def visualize_impact(self, df: pd.DataFrame, save_path: str = None):
        """Create visualizations of environmental impact"""
        fig, axes = plt.subplots(2, 2, figsize=(15, 12))

        # Exclude total row for phase-wise analysis
        phase_data = df[df['phase'] != 'TOTAL']

        # Carbon emissions by phase
        axes[0,0].pie(phase_data['carbon_kg'], labels=phase_data['phase'], autopct='%1.1f%%')
        axes[0,0].set_title('Carbon Emissions by Phase')

        # Energy consumption by phase
        phase_data.plot(x='phase', y='energy_kwh', kind='bar', ax=axes[0,1])
        axes[0,1].set_title('Energy Consumption by Phase')
        axes[0,1].set_ylabel('Energy (kWh)')

        # Water usage by phase
        phase_data.plot(x='phase', y='water_liters', kind='bar', ax=axes[1,0], color='blue')
        axes[1,0].set_title('Water Usage by Phase')
        axes[1,0].set_ylabel('Water (Liters)')

        # Timeline visualization
        axes[1,1].plot(phase_data['phase'], phase_data['carbon_kg'], marker='o')
        axes[1,1].set_title('Carbon Emissions Timeline')
        axes[1,1].set_ylabel('Carbon (kg CO2)')

        plt.tight_layout()
        if save_path:
            plt.savefig(save_path, dpi=300, bbox_inches='tight')
        plt.show()